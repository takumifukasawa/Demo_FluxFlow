export const litScreenSpaceRaymarchFragmentTemplate = `#version 300 es
precision highp float;
#pragma DEFINES
layout(std140) uniform ubCommon{float uTime;float uDeltaTime;vec4 uViewport;};layout(std140) uniform ubTransformations{mat4 uWorldMatrix;mat4 uViewMatrix;mat4 uProjectionMatrix;mat4 uNormalMatrix;mat4 uInverseWorldMatrix;mat4 uViewProjectionMatrix;mat4 uInverseViewMatrix;mat4 uInverseProjectionMatrix;mat4 uInverseViewProjectionMatrix;mat4 uTransposeInverseViewMatrix;};layout(std140) uniform ubCamera{vec3 uViewPosition;vec3 uViewDirection;float uNearClip;float uFarClip;float uAspect;float uFov;};
#pragma BLOCK_BEFORE_RAYMARCH_CONTENT
#define PI 3.14
#define PI2 6.28
vec2 u(vec2 u,vec2 o){return u.x<o.x?u:o;}mat2 u(float u){float v=sin(u),f=cos(u);return mat2(f,v,-v,f);}vec3 n(vec3 u){return u-4.*round(u/4.);}vec2 n(vec2 v,float o){return v*u(-o);}vec3 v(vec3 u,vec3 o){return u-o;}vec3 e(vec3 u,vec3 o){return u/o;}float o(float u,vec3 v){return u*min(v.x,min(v.y,v.z));}vec2 e(vec2 u){float v=PI/10.-atan(u.x,u.y),f=PI*2./10.;v=floor(v/f)*f;return n(u,-v);}float opSm(float u,float v,float o){float f=clamp(.5+.5*(v-u)/o,0.,1.);return mix(v,u,f)-o*f*(1.-f);}float s(vec3 u,float o){return length(u)-o;}float e(vec3 u,float v,float o){vec2 f=vec2(length(u.xz)-2.*v+.05,abs(u.y)-o);return min(max(f.x,f.y),0.)+length(max(f,0.))-.05;}float opWing(vec3 u,vec3 f,float z,vec2 m){u=v(u,vec3(m.xy,0));u.xy=n(u.xy,z);u.yz=n(u.yz,PI*.5);u=e(u,f);float s=e(u,1.,.1);return o(s,f);}vec2 opButterfly(vec3 u,float o){vec3 v=u;v.yz=n(v.yz,-PI*.5);v.x=abs(v.x);v.xz=n(v.xz,PI*sin(sin(uTime*10.+o)*cos(uTime*6.+o))*.3);float f=opWing(v,vec3(.4,.2,.24)*.2,PI*-.3,vec2(.5,.4)*.2),z=opWing(v,vec3(.32,.2,.2)*.2,PI*.3,vec2(.4,-.4)*.2);return vec2(min(f,z),0);}vec2 opFlower(vec3 f){vec2 m=vec2(1e4,-1e4);f.y-=-.8;float r=.1;r=sin(uTime*2.4+.2)*.5;float z=-.1;z=cos(uTime*2.6+.1)*-.5;float x=f.y*sin(f.y*r),y=f.y*sin(f.y*z),P=sin(1.12*r)*.28,d=sin(1.12*z)*.28;mat2 t=u(-1.12*r),c=u(1.12*z);vec3 l=f;l=v(l,vec3(x,.28,y));float G=e(l,.015,.28);m=u(m,vec2(G,1));vec3 i=f;i=v(i,vec3(P,.56,d));i.yz=n(i.yz,PI*.5);i.xz*=t;i.yz*=c;i.xy=e(i.xy);i=v(i,vec3(0,.2,sin(i.y*5.)*.105));i.yz=n(i.yz,PI*.5);vec3 A=vec3(.08,.2,.2);i=e(i,A);float h=e(i,.4,.01);h=o(h,A);m=u(m,vec2(h,2));vec3 B=f;B=v(B,vec3(P,.59,d));float D=s(B,.04);return u(m,vec2(D,3));}
#pragma RAYMARCH_SCENE
vec3 o(vec3 u){vec3 v=vec3(dfScene(u+vec3(1e-4,0,0)).x-dfScene(u+vec3(-1e-4,0,0)).x,dfScene(u+vec3(0,1e-4,0)).x-dfScene(u+vec3(0,-1e-4,0)).x,dfScene(u+vec3(0,0,1e-4)).x-dfScene(u+vec3(0,0,-1e-4)).x);return normalize(v);}vec3 e(vec2 u,vec3 v,float f,float o){vec2 i=u*2.-1.;float m=tan(f*3.141592/180.*.5);vec3 z=v,x=normalize(cross(z,vec3(0,1,0)));return normalize(m*o*x*i.x+normalize(cross(x,z))*m*i.y+v);}float n(float u,float v,float o){return(u+v)/(v-o);}float o(float u,float v,float o){float f=v*u;return-f/(o*(u-1.)-f);}void f(float u,float o){if(u<o)discard;}uniform float uMetallic,uRoughness;uniform int uShadingModelId;
#pragma APPEND_UNIFORMS
uniform sampler2D uDepthTexture;uniform float uTargetWidth,uTargetHeight;
#ifdef USE_ALPHA_TEST
uniform float uAlphaTestThreshold;
#endif
in vec2 vUv;in vec3 vWorldPosition;
#define SHADING_MODEL_NUM 3.
struct GBufferA{vec3 baseColor;};struct GBufferB{vec3 normal;float shadingModelId;};struct GBufferC{float metallic;float roughness;};struct GBufferD{vec3 emissiveColor;};vec4 t(vec3 u,int v){float f=float(v)/SHADING_MODEL_NUM;return vec4(u*.5+.5,f);}layout(location=0) out vec4 outGBufferA;layout(location=1) out vec4 outGBufferB;layout(location=2) out vec4 outGBufferC;layout(location=3) out vec4 outGBufferD;void main(){vec4 u=vec4(0,0,0,1);vec3 v=vec3(0,0,1),x=uViewPosition,z=e(vUv,uViewDirection,uFov,uAspect);vec2 i=vec2(0);float m=uNearClip;vec3 r=x;for(int l=0;l<100;l++){r=x+z*m;i=dfScene(r);m+=i.x;if(m>uFarClip||i.x<=1e-4)break;}if(i.x>1e-4)discard;float l=texelFetch(uDepthTexture,ivec2(gl_FragCoord.xy),0).x,d=o(l,uNearClip,uFarClip),P=n((uViewMatrix*vec4(r,1)).z,uNearClip,uFarClip);if(P>=d)discard;vec4 s=uProjectionMatrix*uViewMatrix*vec4(r,1);gl_FragDepth=s.z/s.w*.5+.5;if(i.x>0.)v=o(r);
#ifdef USE_ALPHA_TEST
f(u.w,uAlphaTestThreshold);
#endif
u.xyz=pow(u.xyz,vec3(2.2));outGBufferA=vec4(u.xyz,1);outGBufferB=t(v,uShadingModelId);outGBufferC=vec4(uMetallic,uRoughness,0,1);outGBufferD=vec4(vec4(1).xyz,1);}`;